version: '3'
services:
  flask-app:
    container_name: flask-app
    build:
      context: .
      dockerfile: ./docker/flask-app.Dockerfile
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_DEBUG: "False"
      APP_PORT: 8000
      MONGODB_HOSTNAME: mongodb
      MONGODB_DATABASE: appfollow
    volumes:
      - .:/opt/project
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo:4.2.3
    container_name: mongodb
    restart: unless-stopped
    command: mongod
    environment:
      MONGO_INITDB_DATABASE: appfollow
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - mongodbdata:/data/db
    networks:
      - backend

  nginx:
    build:
      context: .
      dockerfile: ./docker/nginx.Dockerfile
    image: nginx
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginxdata:/var/log/nginx
    depends_on:
      - flask-app
    networks:
      - frontend

  crawler:
    container_name: crawler
    build:
      context: .
      dockerfile: ./docker/crawler.Dockerfile
    environment:
      MONGODB_HOSTNAME: mongodb
      MONGODB_DATABASE: appfollow
    volumes:
      - .:/opt/project
    depends_on:
      - mongodb
    networks:
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  nginxdata:
    driver: local